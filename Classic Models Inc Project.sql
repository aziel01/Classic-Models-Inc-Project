-- -----------------------------------------------------
-- 1.. Delete unused columns 
-- -----------------------------------------------------

ALTER TABLE customers
DROP COLUMN creditlimit,
DROP COLUMN phone,
DROP COLUMN postalcode;

ALTER TABLE employees
DROP COLUMN extension;

ALTER TABLE offices
DROP COLUMN postalcode; 

ALTER TABLE productlines
DROP COLUMN htmldescription,
DROP COLUMN image; 

-- -----------------------------------------------------
-- 1.1 Modify paymentdate column in payment table
-- -----------------------------------------------------

ALTER TABLE payments
MODIFY COLUMN paymentdate date;

-- -----------------------------------------------------
-- 1.2 Modify date columns in order table 
-- -----------------------------------------------------

ALTER TABLE orders
MODIFY COLUMN orderdate date,
MODIFY COLUMN requireddate date,
MODIFY COLUMN shippeddate date;

-- -----------------------------------------------------
-- 2. What is the total of payments received? What is the total amount of orders? 
-- -----------------------------------------------------
 
SELECT
	ROUND(SUM(quantityordered*priceeach),2) as total_amount_of_orders,
	(SELECT ROUND(SUM(payments.amount),2) FROM payments)  as total_amount_of_payments 
FROM orderdetails;

-- -----------------------------------------------------
-- 3. Customers and their sales representative. 
-- -----------------------------------------------------

SELECT 
	c.customernumber,
    c.customername,
	CONCAT(emp.firstname, ' ', emp.lastname) as 'sales_representative'	
FROM customers c
JOIN employees emp
	ON c.salesRepEmployeeNumber = emp.employeeNumber;

-- -----------------------------------------------------
-- 3.1 customer and sales_representatives with payment amount 
-- -----------------------------------------------------

SELECT 
	c.customernumber,
    c.customername,
    CONCAT(e.firstname, ' ', e.lastname) as sales_representative,
    ROUND(SUM(p.amount),2) as payment
FROM employees e
JOIN customers c
    on c.salesRepEmployeeNumber = e.employeenumber
JOIN payments p
	on c.customernumber = p.customernumber
GROUP BY c.customernumber,c.customername
ORDER BY sales_representative desc;
    
-- -----------------------------------------------------   
-- 3.2 Total payments of customer 'Atelier graphique' 
-- -----------------------------------------------------

SELECT 
	c.customername,
    sum(payments.amount) AS total_payments
FROM payments
INNER JOIN customers c
		ON payments.customernumber = c.customernumber
WHERE c.customername = 'Atelier graphique'
GROUP BY c.customername;

-- -----------------------------------------------------
-- 4. Product/s that have not been sold --
-- -----------------------------------------------------

SELECT
* 
FROM products
WHERE not exists 
	(SELECT * 
		FROM orderdetails
		WHERE products.productcode = orderdetails.productcode);
 
 -- -----------------------------------------------------
 -- 6. Total value of all orders by CUSTOMERS 
 -- -----------------------------------------------------
 
SELECT
	ord.customernumber,
	c.customername,
    ROUND(SUM(det.quantityordered*det.priceeach),2) as sales
FROM customers c
JOIN orders ord
	ON c.customernumber = ord.customernumber
JOIN orderdetails det
	ON ord.ordernumber = det.ordernumber
GROUP BY ord.customernumber, c.customername
ORDER BY sales desc;

-- -----------------------------------------------------
-- 6.0 Total PAYMENTS of all orders by CUSTOMERS 
-- -----------------------------------------------------

SELECT 
	customers.customerName,
    ROUND(SUM(payments.amount),2) AS total_payments
FROM customers
JOIN payments
	ON customers.customerNumber = payments.customernumber
GROUP BY customers.customerName
ORDER BY total_payments desc;

-- -----------------------------------------------------
-- 6.1 Total value by ordered PRODUCTS (including unpaid)
-- ----------------------------------------------------- 

SELECT
	prod.productname,
    FORMAT(SUM(ord.quantityordered*ord.priceeach),0) as sales
FROM products prod
JOIN orderdetails ord
	ON ord.productcode = prod.productcode
GROUP BY productname
ORDER BY sales asc; 

-- -----------------------------------------------------
-- 6.2  Total value by ordered PRODUCT LINE (including unpaid) 
-- -----------------------------------------------------

SELECT
	prod.productline,
    ROUND(SUM(ordet.quantityordered * priceeach),2) as sales
FROM products prod
INNER JOIN orderdetails ordet
		ON prod.productcode = ordet.productcode
GROUP BY prod.productline
ORDER BY sales desc;


-- -----------------------------------------------------
-- 6.3 Sales generated by each customer based on their orders and as percentage of total sales 
-- -----------------------------------------------------

SELECT
	c.customername,
    ROUND(SUM(ordet.quantityordered*ordet.priceeach),2) as sales,
    ROUND(SUM(ordet.quantityordered*ordet.priceeach)*100/ (SELECT SUM(quantityordered*priceeach) FROM orderdetails),2) as percent
FROM customers c
JOIN orders
	ON orders.customernumber = c.customernumber
JOIN orderdetails ordet
	ON orders.orderNumber = ordet.ordernumber
GROUP BY customername
ORDER BY sales desc;


-- -----------------------------------------------------
-- 7. Employees and office location table  
-- -----------------------------------------------------

SELECT
	e.employeenumber,
    e.officecode,
    CONCAT(e.firstname, ' ', e.lastname) as 'employee_name',
    e.jobtitle,
	ofc.city,
    ofc.addressline1,
    ofc.addressline2,
    ofc.state,
    ofc.country
 FROM offices ofc
 JOIN employees e
	ON ofc.officeCode = e.officeCode;
   
   
-- -----------------------------------------------------  
-- 8.0 Orders with 'On Hold' status 
-- -----------------------------------------------------

SELECT *
FROM orders
WHERE status = 'On Hold';


-- -----------------------------------------------------
-- 8.1 Order status and sales of customers and ordered products  
-- -----------------------------------------------------

SELECT 
	o.ordernumber,
    c.customername,
	p.productname,
    o.orderdate,
    o.requireddate,
    o.shippeddate,
	o.status,
    SUM(det.quantityordered*det.priceeach) as total_sales
FROM customers c

INNER JOIN orders o
		ON o.customernumber = c.customernumber
INNER JOIN orderdetails det
		ON  o.ordernumber = det.ordernumber
INNER JOIN products p
		ON det.productcode = p.productcode 
WHERE c.customername LIKE 'online diecast%'
GROUP BY o.ordernumber, c.customername,
		p.productname,
		o.orderdate,
		o.requireddate,
		o.shippeddate,
		o.status;
       

-- -----------------------------------------------------
-- 8.2 Customer name with orders on hold 
-- -----------------------------------------------------

SELECT customerName , count(*) As 'Orders on Hold'
FROM customers
INNER JOIN orders
ON customers.customerNumber = orders.customerNumber
WHERE orders.status = 'On Hold'
GROUP BY customerName;


-- -----------------------------------------------------
-- 9. List of customer names and product name with total value 
-- -----------------------------------------------------

SELECT 
	customers.customerName,
    products.productname,
    ROUND(SUM(orderdetails.quantityOrdered * orderdetails.priceeach),2) AS total_value
FROM customers
JOIN orders
	ON customers.customerNumber = orders.customerNumber
JOIN orderdetails
	ON orders.orderNumber = orderdetails.orderNumber
JOIN products
	ON orderdetails.productCode = products.productcode
GROUP BY customers.customerName, products.productname
ORDER BY customers.customerName;


-- -----------------------------------------------------
-- 9.1 List of customers and productline sales 
-- -----------------------------------------------------

SELECT 
	customers.customerName,
    products.productline,
    ROUND(SUM(orderdetails.quantityOrdered * orderdetails.priceeach),2) AS total_value
FROM customers
JOIN orders
	ON customers.customerNumber = orders.customerNumber
JOIN orderdetails
	ON orders.orderNumber = orderdetails.orderNumber
JOIN products
	ON orderdetails.productCode = products.productcode
GROUP BY customers.customerName, products.productline
ORDER BY customers.customerName;

-- -----------------------------------------------------
-- 10. Employees and who they reports to. 
-- -----------------------------------------------------

SELECT 
	CONCAT(e.firstname, ' ', e.lastname) employee_name, 
    CONCAT(r.firstname, ' ', r.lastname) reports_to
FROM employees e
JOIN employees r
	on e.reportsto = r.employeenumber;

-- -----------------------------------------------------
-- 11. Sales representative with their 5% commission amount
-- -----------------------------------------------------

SELECT
	customers.customerName as 'client',
	CONCAT(employees.firstname, ' ', employees.lastname) as sales_rep,
	ROUND(.05*SUM(pay.amount),2) as '5%_commission_amount'
FROM payments pay
INNER JOIN customers
	on pay.customernumber = customers.customerNumber
INNER JOIN employees
	ON customers.salesRepEmployeeNumber = employees.employeeNumber
GROUP BY client,sales_rep    
ORDER BY sales_rep; 
  
-- -----------------------------------------------------
-- 12. Days between order date and processing date, including customer name and product name
-- -----------------------------------------------------

SELECT
customers.customername,
products.productname,
orderdate,
shippeddate,
DATEDIFF(shippeddate,orderdate) as processing_days
FROM customers
JOIN orders
	ON customers.customerNumber = orders.customerNumber
JOIN orderdetails
	ON orders.orderNumber = orderdetails.orderNumber
JOIN products
	ON orderdetails.productCode = products.productcode
GROUP BY customers.customerName, orders.orderNumber, products.productname
ORDER BY customers.customerName;
	
    
-- ----------------------
-- Sandbox --
-- --------------------
 /*
SELECT
	prod.productname,
    ROUND(SUM(ord.quantityordered*ord.priceeach)*100/(SELECT SUM(quantityordered*priceeach) FROM orderdetails),2) as sales
FROM products prod
JOIN orderdetails ord
	ON ord.productcode = prod.productcode
GROUP BY productname
ORDER BY productname; 
*/

/*
SELECT 
	prod.productline,
    ROUND(SUM(pay.amount),2) as sales_revenue
FROM products prod
JOIN orderdetails det
	ON det.productcode = prod.productcode
JOIN orders ord
	ON det.ordernumber = ord.ordernumber
JOIN payments pay
	ON ord.customernumber = pay.customernumber
GROUP BY prod.productline
ORDER BY prod.productline; 
*/
    



/* NO
SELECT 
	prod.productname,
    ROUND(SUM(pay.amount*100)/ (SELECT SUM(amount) FROM payments),2) as sales_revenue
FROM products prod
JOIN orderdetails det
	ON det.productcode = prod.productcode
JOIN orders ord
	ON det.ordernumber = ord.ordernumber
JOIN payments pay
	ON ord.customernumber = pay.customernumber
GROUP BY prod.productname
ORDER BY prod.productname; 

SELECT 
	prod.productname,
    ROUND(SUM(pay.amount*100)/ (SELECT SUM(amount) FROM payments),2) as sales_revenue
FROM products prod
JOIN orderdetails det
	ON det.productcode = prod.productcode
JOIN orders ord
	ON det.ordernumber = ord.ordernumber
JOIN payments pay
	ON ord.customernumber = pay.customernumber
GROUP BY prod.productname
ORDER BY prod.productname;
*/


